/********************************************************************************
This code is automatically generated by the MotePy compiler. DO NOT EDIT!
********************************************************************************/
/*Managed memory variables*/
uint32_t __vtmem[3660];
float (*stage1_weights_p)[60][60]= (float (*)[60][60]) &__vtmem[0];
#define stage1_weights (*stage1_weights_p)
float (*stage1_vec1_p)[60]= (float (*)[60]) &__vtmem[3600];
#define stage1_vec1 (*stage1_vec1_p)
float (*stage2_vec2_p)[60]= (float (*)[60]) &__vtmem[3600];
#define stage2_vec2 (*stage2_vec2_p)
float (*stage2_vec3_p)[60]= (float (*)[60]) &__vtmem[3600];
#define stage2_vec3 (*stage2_vec3_p)
/*End of managed memory variables*/
/*Module vars for stage1*/
const float stage1_weights2[3][3]={ { 1, 2, 3} , { 4, 5, 6} , { 7, 8, 9} } ;
/*End of module vars for stage1*/
/*Module vars for stage2*/
/*End of module vars for stage2*/
typedef enum { __stage1_process, __stage2_process}  __pipeline;
 __pipeline __state = __stage1_process;
void _stage1_init()
{
    {
        Serial.begin(115200);
        for(int __i=0; __i<60; __i++)
        {
            stage1_vec1[__i]=0;
        }
    }
}
void _stage1_process()
{
    float __t0;
    float __t1;
    {
        for(int __i=0; __i<60; __i++)
        {
            stage1_vec1[__i]=1;
            __t0=0;
            __t1=0;
            for(int __j=0; __j<60; __j++)
            {
                __t0=((stage1_vec1[__j]*stage1_weights[__j][__i])+__t0);
                __t1=((stage1_vec1[__j]*stage1_weights[__j][__i])+__t1);
            }
            stage1_vec1[__i]=(__t0+__t1);
        }
        Serial.print("process 1\n");
        __state = __stage2_process;
    }
}
void _stage2_init()
{
    {
    }
}
void _stage2_process()
{
    {
        for(int __i=0; __i<60; __i++)
        {
            stage2_vec2[__i]=0;
            stage2_vec2[__i]=(stage2_vec2[__i]+stage2_vec2[__i]);
            stage2_vec3[__i]=0;
            stage2_vec3[__i]=(stage2_vec3[__i]+stage2_vec3[__i]);
        }
        Serial.print("Process 2\n");
    }
}
void loop()
{
    switch(__state)
    {
        case __stage1_process:
        __state = __stage1_process;
        _stage1_process();
        break;
        case __stage2_process:
        __state = __stage1_process;
        _stage2_process();
        break;
        default :
        __state = __stage1_process;
    }
}
void setup()
{
    _stage1_init();
    _stage2_init();
}