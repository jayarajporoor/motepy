/********************************************************************************
This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!
********************************************************************************/
#include <stdio.h>
#include <stdint.h>
#include <math.h>
#include <stdlib.h>
/*Managed memory variables*/
uint32_t __vtmem[120];
float (*stage1_vec1_p)[60]= (float (*)[60]) &__vtmem[0];
#define stage1_vec1 (*stage1_vec1_p)
float (*stage2_vec2_p)[60]= (float (*)[60]) &__vtmem[60];
#define stage2_vec2 (*stage2_vec2_p)
float (*stage2_vec3_p)[60]= (float (*)[60]) &__vtmem[60];
#define stage2_vec3 (*stage2_vec3_p)
/*End of managed memory variables*/
/*Module vars for stage1*/
/*End of module vars for stage1*/
/*Module vars for stage2*/
/*End of module vars for stage2*/
typedef enum { __stage1_process, __stage2_process}  __pipeline;
 __pipeline __state = __stage1_process;
void _stage1_init()
{
    {
        for(int __i=0; __i<60; __i++)
        {
            stage1_vec1[__i]=0;
        }
    }
}
void _stage1_process()
{
    {
        for(int __i=0; __i<60; __i++)
        {
            stage1_vec1[__i]=(stage1_vec1[__i]+stage1_vec1[__i]);
        }
        printf("Address of vec1: %ld\n", ( (uint64_t) (stage1_vec1)));
        __state = __stage2_process;
    }
}
void _stage2_init()
{
    {
    }
}
void _stage2_process()
{
    {
        for(int __i=0; __i<60; __i++)
        {
            stage2_vec2[__i]=0;
            stage2_vec2[__i]=(stage2_vec2[__i]+stage2_vec2[__i]);
        }
        printf("Address of vec2: %ld\n", ( (uint64_t) (stage2_vec2)));
        for(int __i=0; __i<60; __i++)
        {
            stage2_vec3[__i]=0;
            stage2_vec3[__i]=(stage2_vec3[__i]+stage2_vec3[__i]);
        }
        printf("Address of vec3: %ld\n", ( (uint64_t) (stage2_vec3)));
    }
}
void loop()
{
    switch(__state)
    {
        case __stage1_process:
        __state = __stage1_process;
        _stage1_process();
        break;
        case __stage2_process:
        __state = __stage1_process;
        _stage2_process();
        break;
        default :
        __state = __stage1_process;
    }
}
void setup()
{
    _stage1_init();
    _stage2_init();
}