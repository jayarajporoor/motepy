module tlc_featurizer;

include Config;

int bucketIndex;
int[FEATURE_LENGTH] featureVector;
float[FEATURE_LENGTH] featureVectorF;


void init(){
}

void getBucket(float ring[400] sensorValue1D,boolean isGY){
	int imax=0,imin=0,maxval=0,minval=0,maxcount=0,mincount=0,postemp=0,negtemp=0,bucketCount,val,index,thresholdCount;

	boolean flagPos=false, flagNeg=false;
	for i in [0,400]{
		val=int(100)*sensorValue1D[i];
		if(val<0){
			featureVector[bucketIndex]=featureVector[bucketIndex]+1;
		}
		else if(val>100){
			featureVector[bucketIndex+19]=featureVector[bucketIndex+19]+1;
		}
		else{
			index=val/5;
			featureVector[bucketIndex+index]=featureVector[bucketIndex+index]+1;
		}
		
		if(isGY==1){
			thresholdCount=3;
			if(val>62 && flagPos==0){
				maxcount=1;
				postemp=i;
				flagPos=true;
				flagNeg=false;
			}
			else if(val>62 && flagPos==1){
				flagNeg=0;
				mincount=0;
				maxcount=maxcount+1;
				if(maxcount>maxval){
					maxval=maxcount;
					if(maxval>thresholdCount){
						featureVector[1]=maxval;
					}
					imax=postemp;
					if(maxval>thresholdCount){
						featureVector[0]=imax;
					}
				}
			}
			else if(val<62 && flagPos==1 && val>32){
				flagPos=false;
				maxcount=0;
				mincount=0;
			}
			else if(val<62 && flagPos==1 && val<32){
				flagPos=false;
				maxcount=0;
				mincount=0;
				negtemp=i;
				flagNeg=true;
			}
			else if(val<32 && flagNeg==0){
				mincount=1;
				negtemp=i;
				flagNeg=true;
				flagPos=false;
			}
			else if(val<32 && flagNeg==1){
				mincount=mincount+1;
				if(mincount>minval){
					minval=mincount;
					if(minval>thresholdCount){
						featureVector[2]=minval;
					}
					imin=negtemp;
					if(minval>thresholdCount){
						featureVector[3]=imin;
					}
				}
			}
			else if(val>32 && flagNeg==1 && val<65){
				flagNeg=false;
				mincount=0;
			}
			else if(val>32 && flagNeg==1 && val>65){
				flagNeg=false;
				mincount=0;
				maxcount=1;
				postemp=i;
				flagPos=true;
			}
			else{
				flagPos=false;
				maxcount=0;
				flagNeg=false;
				mincount=0;
			}
		}
	}
	bucketIndex=bucketIndex+BUCKET_WIDTH;
	//if(bucketIndex>124 || bucketIndex<23){
	//	return 0;
	//}
	//return 1;
}


default flow featurizer(float ring[400] normAX,float ring[400] normAY,float ring[400] normAZ, float ring[400] normGX, float ring[400] normGY, float ring[400] normGZ){
	featureVector=0; 
	featureVector[0]= -1;
	featureVector[3]= -1;
	bucketIndex=4;

	getBucket(normAX,false);
	getBucket(normAY,false);
	getBucket(normAZ,false);
	getBucket(normGX,false);
	getBucket(normGY,true);
	getBucket(normGZ,false);
	featureVectorF = featureVector;
	//Serial.println(featureVectorF[0]);
	 next(featureVectorF);
}
