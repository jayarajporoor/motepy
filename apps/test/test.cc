/********************************************************************************
This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!
********************************************************************************/
#include <stdio.h>
#include <stdint.h>
/*Managed memory variables*/
uint32_t __vtmem[110];
float (*init_res_p)[20]= (float (*)[20]) &__vtmem[0];
#define init_res (*init_res_p)
float (*init2_res2_p)[60]= (float (*)[60]) &__vtmem[20];
#define init2_res2 (*init2_res2_p)
float (*init2_res3_p)[30]= (float (*)[30]) &__vtmem[20];
#define init2_res3 (*init2_res3_p)
float (*init2_res4_p)[30]= (float (*)[30]) &__vtmem[80];
#define init2_res4 (*init2_res4_p)
/*End of managed memory variables*/
/*Module vars for init*/
/*End of module vars for init*/
/*Module vars for init2*/
uint32 (*init2_res5_p)[10]= (uint32 (*)[10]) ((void *) 1000);
#define init2_res5 (*init2_res5_p)
/*End of module vars for init2*/
typedef enum { __init_init, __init2_init}  __pipeline;
 __pipeline __state = __init_init;
void _init_init()
{
    {
        for(int __i=0; __i<20; __i++)
        {
            init_res[__i]=(init_res[__i]+init_res[__i]);
        }
        printf("Address res %p\n", init_res);
        __state = __init2_init;
    }
}
void _init2_init()
{
    float init2_init_value;
    float __t0;
    {
        for(int __i=0; __i<60; __i++)
        {
            init2_res2[__i]=0;
            init2_res2[__i]=(init2_res2[__i]+init2_res2[__i]);
        }
        printf("Address res2 %p\n", init2_res2);
        for(int __i=0; __i<30; __i++)
        {
            init2_res3[__i]=0;
            init2_res4[__i]=0;
        }
        init2_res3[0]=(init2_res3[0]+1);
        __t0=0;
        for(int __i=0; __i<30; __i++)
        {
            __t0=((init2_res4[__i]*init2_res4[__i])+__t0);
        }
        init2_init_value=__t0;
        for(int i=0; i<3; i++)
        {
            init2_res4[i]=exp(init2_res4[i]);
        }
        printf("Address res4 %p\n", init2_res4);
        printf("Address res3 %p\n", init2_res3);
    }
}
void loop()
{
    switch(__state)
    {
        case __init_init:
        __state = __init_init;
        _init_init();
        break;
        case __init2_init:
        __state = __init_init;
        _init2_init();
        break;
        default :
        __state = __init_init;
    }
}
void setup()
{
    _init_init();
    _init2_init();
}