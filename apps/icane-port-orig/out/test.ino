/********************************************************************************
This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!
********************************************************************************/
#include <Arduino.h>
#include <wiring_private.h>
#include <Wire.h>
#include "src/lib/I2Cdev.h"
#include "src/lib/MPU6050_6Axis_MotionApps20.h"
/*Managed memory variables*/
uint32_t __vtmem[2687];
int16_t (*normalize_inp_test_minAcc_p)[3]= (int16_t (*)[3]) &__vtmem[0];
#define normalize_inp_test_minAcc (*normalize_inp_test_minAcc_p)
int16_t (*normalize_inp_test_maxAcc_p)[3]= (int16_t (*)[3]) &__vtmem[2];
#define normalize_inp_test_maxAcc (*normalize_inp_test_maxAcc_p)
int16_t (*normalize_inp_test_minGyr_p)[3]= (int16_t (*)[3]) &__vtmem[4];
#define normalize_inp_test_minGyr (*normalize_inp_test_minGyr_p)
int16_t (*normalize_inp_test_maxGyr_p)[3]= (int16_t (*)[3]) &__vtmem[6];
#define normalize_inp_test_maxGyr (*normalize_inp_test_maxGyr_p)
float (*normalize_inp_test_normAX_p)[400]= (float (*)[400]) &__vtmem[8];
#define normalize_inp_test_normAX (*normalize_inp_test_normAX_p)
float (*normalize_inp_test_normAY_p)[400]= (float (*)[400]) &__vtmem[408];
#define normalize_inp_test_normAY (*normalize_inp_test_normAY_p)
float (*normalize_inp_test_normAZ_p)[400]= (float (*)[400]) &__vtmem[808];
#define normalize_inp_test_normAZ (*normalize_inp_test_normAZ_p)
float (*normalize_inp_test_normGX_p)[400]= (float (*)[400]) &__vtmem[1208];
#define normalize_inp_test_normGX (*normalize_inp_test_normGX_p)
float (*normalize_inp_test_normGY_p)[400]= (float (*)[400]) &__vtmem[1608];
#define normalize_inp_test_normGY (*normalize_inp_test_normGY_p)
float (*normalize_inp_test_normGZ_p)[400]= (float (*)[400]) &__vtmem[2008];
#define normalize_inp_test_normGZ (*normalize_inp_test_normGZ_p)
int (*thresholding_test_vote_p)[10]= (int (*)[10]) &__vtmem[2408];
#define thresholding_test_vote (*thresholding_test_vote_p)
int (*thresholding_test_resultScores_p)[11]= (int (*)[11]) &__vtmem[2418];
#define thresholding_test_resultScores (*thresholding_test_resultScores_p)
int (*tlcfeaturizer_test_featureVector_p)[124]= (int (*)[124]) &__vtmem[2429];
#define tlcfeaturizer_test_featureVector (*tlcfeaturizer_test_featureVector_p)
float (*normalize_inp_test_normalize_normGyr_p)[3]= (float (*)[3]) &__vtmem[2429];
#define normalize_inp_test_normalize_normGyr (*normalize_inp_test_normalize_normGyr_p)
float (*protonn_test_predict_y_cap_p)[10]= (float (*)[10]) &__vtmem[2429];
#define protonn_test_predict_y_cap (*protonn_test_predict_y_cap_p)
uint8_t (*mpu_acq_test_fifoBuffer_p)[64]= (uint8_t (*)[64]) &__vtmem[2429];
#define mpu_acq_test_fifoBuffer (*mpu_acq_test_fifoBuffer_p)
int16_t (*mpu_acq_test_mpu_acq_acc_p)[3]= (int16_t (*)[3]) &__vtmem[2429];
#define mpu_acq_test_mpu_acq_acc (*mpu_acq_test_mpu_acq_acc_p)
float (*tlcfeaturizer_test_featureVectorF_p)[124]= (float (*)[124]) &__vtmem[2553];
#define tlcfeaturizer_test_featureVectorF (*tlcfeaturizer_test_featureVectorF_p)
float (*normalize_inp_test_normalize_normAcc_p)[3]= (float (*)[3]) &__vtmem[2553];
#define normalize_inp_test_normalize_normAcc (*normalize_inp_test_normalize_normAcc_p)
int (*protonn_test_scores_p)[10]= (int (*)[10]) &__vtmem[2677];
#define protonn_test_scores (*protonn_test_scores_p)
float (*protonn_test_predict_x_cap_p)[10]= (float (*)[10]) &__vtmem[2677];
#define protonn_test_predict_x_cap (*protonn_test_predict_x_cap_p)
int16_t (*mpu_acq_test_mpu_acq_gyr_p)[3]= (int16_t (*)[3]) &__vtmem[2677];
#define mpu_acq_test_mpu_acq_gyr (*mpu_acq_test_mpu_acq_gyr_p)
/*End of managed memory variables*/
/*Module vars for mpu_acq_test*/
const int mpu_acq_test_x=0, mpu_acq_test_y=1, mpu_acq_test_z=2;
MPU6050 mpu_acq_test_mpu1;
uint16_t mpu_acq_test_fifoPacketSize;
uint16_t mpu_acq_test_currBucketBufferSize=0;
uint32_t mpu_acq_test_lastSent=0;
/*End of module vars for mpu_acq_test*/
/*Module vars for arduino*/
/*End of module vars for arduino*/
/*Module vars for normalize_inp_test*/
const int32_t normalize_inp_test_BAUD_RATE=115200;
const int16_t normalize_inp_test_NUM_BUCKETS=20;
const int16_t normalize_inp_test_STRIDE=20;
const int16_t normalize_inp_test_BUCKET_WIDTH=20;
const int16_t normalize_inp_test_BUCKET_BUFF_WIDTH=40;
const int16_t normalize_inp_test_FEATURE_LENGTH=124;
const int16_t normalize_inp_test_FEAT_VEC_DIM=124;
const int16_t normalize_inp_test_GEST_NOTA=0;
const int16_t normalize_inp_test_GEST_SILENCE=1;
const int16_t normalize_inp_test_GEST_TAP=2;
const int16_t normalize_inp_test_GEST_DTAP=3;
const int16_t normalize_inp_test_GEST_LTWIST=4;
const int16_t normalize_inp_test_GEST_RTWIST=5;
const int16_t normalize_inp_test_GEST_Slow_LTWIST=7;
const int16_t normalize_inp_test_GEST_Slow_RTWIST=8;
int normalize_inp_test___pos_normAX = 0;
int normalize_inp_test___pos_normAY = 0;
int normalize_inp_test___pos_normAZ = 0;
int normalize_inp_test___pos_normGX = 0;
int normalize_inp_test___pos_normGY = 0;
int normalize_inp_test___pos_normGZ = 0;
const int normalize_inp_test_x=0, normalize_inp_test_y=1, normalize_inp_test_z=2;
int16_t normalize_inp_test_numNewReadings;
int32_t normalize_inp_test_samplesAfterReset;
/*End of module vars for normalize_inp_test*/
int16_t (*normalize_inp_test_normalize_acc_p)[3];
#define normalize_inp_test_normalize_acc (*normalize_inp_test_normalize_acc_p)
int16_t (*normalize_inp_test_normalize_gyr_p)[3];
#define normalize_inp_test_normalize_gyr (*normalize_inp_test_normalize_gyr_p)
/*Module vars for tlcfeaturizer_test*/
const int32_t tlcfeaturizer_test_BAUD_RATE=115200;
const int16_t tlcfeaturizer_test_NUM_BUCKETS=20;
const int16_t tlcfeaturizer_test_STRIDE=20;
const int16_t tlcfeaturizer_test_BUCKET_WIDTH=20;
const int16_t tlcfeaturizer_test_BUCKET_BUFF_WIDTH=40;
const int16_t tlcfeaturizer_test_FEATURE_LENGTH=124;
const int16_t tlcfeaturizer_test_FEAT_VEC_DIM=124;
const int16_t tlcfeaturizer_test_GEST_NOTA=0;
const int16_t tlcfeaturizer_test_GEST_SILENCE=1;
const int16_t tlcfeaturizer_test_GEST_TAP=2;
const int16_t tlcfeaturizer_test_GEST_DTAP=3;
const int16_t tlcfeaturizer_test_GEST_LTWIST=4;
const int16_t tlcfeaturizer_test_GEST_RTWIST=5;
const int16_t tlcfeaturizer_test_GEST_Slow_LTWIST=7;
const int16_t tlcfeaturizer_test_GEST_Slow_RTWIST=8;
int tlcfeaturizer_test_bucketIndex;
/*End of module vars for tlcfeaturizer_test*/
float (*tlcfeaturizer_test_featurizer_normAX_p)[400];
#define tlcfeaturizer_test_featurizer_normAX (*tlcfeaturizer_test_featurizer_normAX_p)
int tlcfeaturizer_test_featurizer___pos_normAX;
float (*tlcfeaturizer_test_featurizer_normAY_p)[400];
#define tlcfeaturizer_test_featurizer_normAY (*tlcfeaturizer_test_featurizer_normAY_p)
int tlcfeaturizer_test_featurizer___pos_normAY;
float (*tlcfeaturizer_test_featurizer_normAZ_p)[400];
#define tlcfeaturizer_test_featurizer_normAZ (*tlcfeaturizer_test_featurizer_normAZ_p)
int tlcfeaturizer_test_featurizer___pos_normAZ;
float (*tlcfeaturizer_test_featurizer_normGX_p)[400];
#define tlcfeaturizer_test_featurizer_normGX (*tlcfeaturizer_test_featurizer_normGX_p)
int tlcfeaturizer_test_featurizer___pos_normGX;
float (*tlcfeaturizer_test_featurizer_normGY_p)[400];
#define tlcfeaturizer_test_featurizer_normGY (*tlcfeaturizer_test_featurizer_normGY_p)
int tlcfeaturizer_test_featurizer___pos_normGY;
float (*tlcfeaturizer_test_featurizer_normGZ_p)[400];
#define tlcfeaturizer_test_featurizer_normGZ (*tlcfeaturizer_test_featurizer_normGZ_p)
int tlcfeaturizer_test_featurizer___pos_normGZ;
/*Module vars for protonn_test*/
const int protonn_test_numPrototypes=24;
const int protonn_test_featDim=124;
const int protonn_test_ldDim=10;
const int protonn_test_numLabels=10;
const float protonn_test_gamma=0.001213;
const float protonn_test_prototypeMatrix[24][10]={ { (-330.386), (-1615.02), 693.686, 484.176, (-1307.28), (-26.2185), 41.1561, (-1291.3), (-105.1), (-2178.8)} , { 100.312, (-902.741), (-139.711), (-356.868), (-516.514), (-812.688), 9.25652, (-163.671), 192.823, (-1344.45)} , { 102.665, (-113.138), (-146.391), (-333.05), (-776.828), (-1090.26), (-3.53363), (-298.814), 1075.1, (-1246.34)} , { 384.619, (-1494.71), (-70.7113), 369.546, (-1154.21), (-174.236), 42.9419, 30.6368, (-418.067), (-933.614)} , { (-52.3776), (-1180.74), 541.131, 740.382, (-1412.66), 116.622, 135.307, 709.383, 482.481, (-2365.48)} , { (-322.845), (-1650.91), (-521.738), (-703.87), (-692.635), (-639.186), (-109.08), (-369.459), 1918.51, (-169.983)} , { 324.057, (-813.343), (-770.959), 79.6414, (-2271.55), 56.498, 658.285, (-761.845), 650.88, (-1608.72)} , { 733.788, (-410.605), (-1656.59), (-15.1115), (-124.253), (-1842.61), 240.517, (-874.106), 1260.37, 54.7301} , { 1024.42, (-1262.88), (-1449.63), 252.691, (-1186.48), (-1005.24), 462.492, (-222.872), 1016.39, (-1024.63)} , { (-23.5272), (-1503.1), 349.936, 408.975, (-1340.98), (-565.953), 805.421, (-302.102), 482.695, 490.083} , { 717.538, (-1104.58), (-268.187), 787.814, (-51.9202), 320.793, 492.588, (-880.837), 809.624, (-17.9254)} , { 1108.77, (-1723.07), (-304.007), (-25.8933), (-518.216), (-854.932), (-118.312), 39.2914, (-93.8901), 41.042} , { (-462.749), (-1988.41), 364.195, 139.51, (-542.942), 238.87, 510.326, (-1328.17), 170.095, (-207.38)} , { 1130.53, (-884.233), (-855.547), 1605.24, (-1432.91), (-1249.38), 437.496, (-173.472), 1175.91, (-667.878)} , { 435.86, (-818.196), (-731.899), 31.3406, (-280.091), (-1661.42), (-315.519), 255.906, 969.064, (-469.603)} , { 398.564, (-1750.91), (-294.197), 509.296, (-1110.22), (-1342.95), (-595.994), (-81.5163), 1368.19, (-6.36764)} , { 304.291, (-610.347), (-687.798), 368.341, (-2175.38), (-449.685), 235.53, (-724.772), 546.771, (-658.318)} , { 117.474, (-521.524), (-633.824), 1255.42, (-1802.77), (-1122.06), (-544.04), (-172.08), 837.924, (-85.8336)} , { (-278.044), (-780.931), (-1372.35), 1191.92, (-1157.18), (-761.016), (-691.698), (-694.965), 695.674, (-419.235)} , { 1295.73, (-419.545), (-1196.8), 1088.59, (-1079.37), (-937.503), 823.876, (-570.782), 489.635, (-1048.17)} , { (-93.6199), (-633.303), (-578.89), (-180.719), 111.997, (-1100.11), 1015.99, (-1529.23), 525.254, (-419.125)} , { 180.994, 88.0834, (-776.479), 244.061, (-1591.69), (-1389.24), (-445.491), (-529.86), 1379.26, (-225.751)} , { 219.712, (-1567.67), (-148.775), (-512.351), (-1126.87), (-1983.16), 89.4974, 491.923, 1292.65, 122.785} , { (-319.32), (-1219.44), (-549.506), 604.923, (-1442.24), (-1292.04), 640.673, (-645.968), 69.3748, 371.546} } ;
const float protonn_test_ldProjectionMatrix[10][124]={ { 1.15711, 3.91637, 3.56443, (-0.553326), (-1.41949), 0.560244, (-0.0170852), 0.275141, (-0.0791636), (-0.0903261), (-0.072102), 0.174361, (-0.155652), (-0.12881), (-0.102549), (-0.259271), (-0.364692), 0.179317, (-0.161546), (-0.0625418), 0.874296, 0.950903, 1.01093, 1.02281, 1.24341, (-1.02521), 0.43935, (-4.59871), 0.386878, 0.300929, (-0.0149552), (-0.0196523), 0.0135593, 0.420218, 0.288151, 1.01433, 0.464269, 0.0330118, 0.494361, 0.507459, 0.284509, 0.344288, (-0.270794), (-0.836469), (-0.175416), 0.324376, 1.46517, (-0.839215), (-0.229149), (-0.397275), (-0.123104), (-0.482977), (-0.343936), (-0.0466033), (-0.108046), (-0.45146), (-0.496777), (-0.225165), (-0.0690763), (-0.381938), 0.976046, 0.609833, 0.888037, 2.02558, (-1.4483), 0.175989, 0.524771, 0.172894, (-0.515055), 0.0688119, 2.06014, 0.984642, 0.696206, 0.917622, 0.939053, 0.463805, (-0.111754), (-0.158968), 0.26223, (-0.181596), 0.00836409, (-0.146651), 0.079733, (-1.22161), 0.538818, (-0.0475722), (-1.02294), 1.51891, 2.34697, 0.768787, 2.40233, 3.15351, (-0.979278), (-1.03105), (-1.10585), (-2.31637), 1.8197, (-0.137049), 2.06012, 0.60625, (-0.478338), 0.330412, (-0.753328), 0.959738, (-0.852124), 1.3385, 1.14339, 1.03899, (-0.366307), 1.3748, (-0.512086), 2.50639, 0.355285, 0.675681, 0.700939, 0.413897, 1.0201, (-0.627343), (-0.506351), 2.3177, (-1.07126), 0.663972, (-1.20026), 1.20214} , { 1.83194, (-0.986275), 0.271643, (-0.0236275), (-1.5157), (-0.857895), (-2.03419), (-1.03274), 0.694382, 0.70258, 0.875977, (-0.268149), 1.07679, 0.667229, 0.833982, 1.16984, 1.2572, 0.810672, 0.959379, 0.703778, 0.182873, (-1.92961), (-1.29544), (-0.605977), (-0.704685), (-4.07475), 1.39232, 1.43903, (-0.494064), (-0.187383), (-0.632672), 0.189864, (-0.120483), (-0.0571114), 0.686621, 0.742115, (-0.211682), 0.0773025, (-0.0704597), (-0.0710819), (-0.194786), (-1.01827), 0.181936, 0.00844172, (-0.314331), (-1.02737), (-2.08966), (-1.64406), 0.345811, 1.10545, 1.13622, 1.93272, 1.65712, (-0.616545), (-0.614819), 1.45617, 2.34011, 1.8985, 1.36159, 0.522075, (-2.55503), (-2.58619), (-1.78912), 0.405336, (-1.27533), (-0.362806), 2.06788, 1.35632, 1.48839, (-1.0454), (-0.25909), (-1.42481), (-1.23098), (-1.07721), (-0.9318), (-0.811023), 0.259697, 0.473354, (-0.818706), (-0.507978), 0.0508645, 1.52634, 1.1007, 1.70463, (-0.0454132), 1.08482, 0.285371, 1.34704, (-0.169319), 1.25655, 0.980788, 2.14344, (-1.40421), (-0.674365), (-0.807557), (-0.48015), 1.64362, (-1.04819), 1.54318, 0.197259, (-0.894128), 1.0203, 0.553128, (-1.76573), 0.584976, (-1.07504), (-1.23817), (-0.0904195), (-0.263997), (-1.0203), (-0.128535), (-0.525949), (-1.19086), (-1.84814), (-1.29244), (-2.71927), (-1.31948), 0.293234, 0.152182, 0.0537903, 1.02953, 1.33058, (-0.724573), (-0.612486)} , { (-2.7128), (-4.62484), (-1.588), 1.87583, (-0.924955), (-2.12122), (-2.05756), (-1.10582), (-2.03019), (-0.29523), 0.514105, 1.52883, 1.60984, 2.53481, 2.90579, 2.40524, 2.35114, 0.608354, 0.16011, (-0.159271), (-1.79813), (-1.52216), (-3.32398), (-3.20653), (-4.30688), (-7.76667), (-1.31304), 5.49982, (-0.644969), (-0.598591), 1.97229, 2.55903, 3.23191, 2.4457, 2.53052, 2.4653, 1.63051, 0.592415, (-0.891098), (-1.60956), (-0.42399), 1.02512, (-1.02584), (-0.00865057), (-2.05718), (-2.71305), (-0.972308), (-0.372797), (-1.03174), (-0.27778), (-0.141659), 1.09591, 1.31864, 2.1296, 2.10296, 2.23612, 1.74329, 0.143142, (-0.261787), (-0.588012), (-3.46801), (-1.12075), (-4.06623), (-2.17341), (-0.248844), 1.19969, (-2.2933), (-1.03745), (-0.128458), (-0.0812591), (-0.0962674), (-2.08961), (-1.61756), (-1.75983), (-1.96927), (-2.25089), (-0.694657), 0.636092, (-0.0366628), 0.517515, 0.259593, 0.263502, (-0.580537), 0.093247, (-0.252301), (-0.255786), 0.783229, (-1.20691), (-1.16078), (-0.183238), (-2.02937), (-0.0329737), (-1.89798), (-1.50355), (-1.20239), (-1.23325), (-0.691091), 0.0886446, (-2.19771), 0.257605, 0.500783, (-0.408612), (-1.0425), 0.758122, (-0.0979312), (-1.2489), 0.256405, 0.673863, (-1.51472), 0.0798992, (-0.51292), (-0.268795), (-2.40973), (-2.24515), (-1.92309), (-0.970646), (-2.34143), (-0.0255154), (-1.04506), (-0.397832), (-0.764413), 0.318635, 0.601633, (-0.316584)} , { (-0.553094), (-0.814544), 2.02298, 1.38157, (-0.00235218), (-0.625325), (-2.3726), (-1.17469), 3.55323, 0.745413, 0.248211, 0.833562, 0.229006, (-0.318217), (-0.245777), (-0.113309), (-0.0467945), 0.293016, 0.447654, 0.344378, (-0.109795), (-0.151891), (-0.507259), 1.48634, (-0.558446), (-1.51947), (-0.193449), 0.821115, 1.20826, 1.03901, (-0.244477), (-0.405235), (-0.288203), (-0.284779), (-0.0502329), 0.16616, (-0.44539), 0.0931547, (-0.164787), (-0.290363), (-0.757161), (-1.02844), (-0.731294), (-0.300385), 2.11099, (-1.25768), 1.24305, (-0.662177), 0.857168, (-0.149671), (-0.202094), (-0.433379), (-0.731072), 0.277042, 0.423887, (-0.698668), (-0.417659), (-0.38786), (-0.0805836), 0.0855019, 1.69188, (-0.442987), 1.08303, 0.3285, (-0.585897), 1.18469, 0.381413, 1.03761, (-0.245886), (-0.812737), (-0.203838), 0.645001, (-0.241135), 0.224076, 0.277203, (-0.478514), (-0.526715), 0.619796, 0.37142, (-1.04846), (-1.58565), 1.40611, 0.571999, (-1.09905), 0.199534, 0.883863, 1.55557, 0.985451, 2.09054, (-0.0889442), 3.4361, 5.10463, (-1.78603), (-0.412825), (-0.395512), (-1.8953), 1.58356, (-0.510838), (-0.519959), (-0.524195), (-1.73252), (-0.0441147), (-0.218711), 0.178347, 0.279115, (-1.48789), (-1.05374), 0.612825, (-0.603395), (-0.583123), 0.434272, 1.3104, (-0.265622), (-0.184275), (-0.195443), (-0.846836), (-0.37933), 0.516003, (-1.0203), 0.181165, (-1.03695), 2.04059, 1.0425, (-1.33616)} , { 1.31408, 1.66844, 1.96237, 1.31773, (-1.54346), 0.197118, 0.127887, 0.8257, (-0.44262), (-0.258932), (-0.360255), 0.406174, 0.954831, (-1.01975), (-0.917869), (-0.748998), (-0.763878), (-0.125465), 0.0925684, (-0.157026), 0.20369, 1.03667, 0.668961, 0.450977, 2.05109, 2.04452, (-0.974747), 0.877218, (-1.02046), (-1.01901), (-0.584794), (-0.932782), (-0.677503), (-0.389356), (-0.85444), (-1.00546), (-0.775136), (-0.268626), (-0.373917), 0.191068, (-0.0105378), (-1.09327), (-0.291847), 0.833752, (-0.692464), (-0.059985), 0.417975, (-0.453451), (-0.111231), (-0.12205), 0.116396, (-0.227907), (-0.669904), (-0.748395), (-0.668667), (-0.757229), (-0.233983), 0.513825, 0.120572, 0.278052, (-0.275775), 0.77593, 1.2821, (-1.0643), (-0.925485), (-0.51008), 0.680713, (-0.607195), (-1.17344), 0.0168058, 1.36928, 0.440717, 0.338562, 0.194554, 0.160419, 1.22987, 0.612367, (-1.21225), (-2.10778), (-1.75023), (-1.08333), 0.520965, (-0.865356), 0.059606, (-0.0458548), 0.180972, 0.127198, (-0.0803491), (-0.0198406), 0.713339, (-0.221506), 0.202346, 0.160903, (-0.622981), (-0.533471), 0.663825, (-0.0828279), 0.662806, 1.66853, 1.86819, 0.38608, 2.08117, (-0.862782), (-1.02221), (-0.154863), (-0.790956), 1.23318, 0.0947992, (-0.538539), 0.694173, 0.487855, (-0.090014), 0.867294, 0.0535255, 0.0782793, 0.373748, 0.260701, (-0.128557), (-0.537499), 0.51128, 1.18717, 0.700068, 2.65133, 0.80463} , { (-2.78802), 0.739082, 0.189399, 1.90134, (-0.989192), 0.42105, (-0.500313), 0.436145, 0.935512, (-0.864389), (-0.130971), (-0.069113), (-1.10412), 0.642694, 0.793578, 0.495481, 0.747344, (-0.281554), (-0.736404), (-0.644826), (-1.14501), (-0.308992), (-1.49735), (-2.92691), (-3.89477), (-3.88953), (-1.20694), 2.02896, (-0.26343), (-0.537319), 0.708172, 0.37648, 0.769828, 0.490451, 0.283841, (-0.092516), 0.731595, (-0.573865), (-1.05073), (-2.05406), (-1.05389), 1.35246, (-0.698241), (-0.619362), (-0.61885), (-1.16055), 0.752997, 0.765613, (-0.951693), (-1.47381), (-1.59338), (-1.25139), (-0.806517), 0.883545, 0.727307, (-0.589097), (-0.888122), (-2.21102), (-1.56371), (-1.48012), (-0.563234), (-0.209075), (-1.86484), (-0.360645), 0.31086, 0.0328529, 0.522701, 0.272996, 0.09082, 0.424529, 1.02512, (-2.0572), (-1.16735), (-0.652321), (-0.465629), (-1.139), (-0.454869), 0.526411, 1.51359, (-1.33868), (-0.683684), (-1.02504), (-0.0938756), (-0.698222), 0.679343, (-0.516265), 0.202378, (-0.417117), 2.41335, 1.2186, (-0.553751), 0.0621522, (-3.67163), (-0.764504), (-1.20168), (-2.0167), (-0.661236), (-1.92753), 0.488205, 0.675839, (-2.44756), (-0.296316), 0.517402, (-2.04699), (-0.244625), 0.573481, (-0.586204), 1.52606, 0.754184, 0.363456, (-1.01454), (-1.01254), (-1.4775), (-0.47641), (-0.316556), (-0.158988), (-1.05), 0.753751, (-0.0471709), 2.04053, 0.604035, (-0.763705), (-0.254442), (-0.603482)} , { 1.45956, 3.95243, 3.27519, 1.79713, 2.27839, 3.43661, 2.04812, 2.08856, 1.58442, (-1.15373), (-0.859074), (-1.4127), (-1.69039), (-0.910636), (-0.968581), (-0.762415), (-0.588963), (-1.1072), (-1.09665), (-1.09203), 0.828873, 2.62899, 1.54245, (-0.79242), (-0.93113), (-2.93864), (-0.231022), 2.56802, 0.134441, (-0.0955274), 0.11394, 0.230207, 0.231324, 0.105073, (-0.255957), (-0.989392), 0.526838, 0.17326, (-0.552258), 0.355191, (-0.563039), (-0.27107), 1.02417, 0.262386, (-0.0830086), 3.02226, 4.13439, 0.363253, (-0.129421), (-0.65132), (-0.624927), (-0.42752), (-0.15614), (-0.625588), (-0.44968), (-0.338258), (-0.190118), (-0.46515), (-0.596791), (-0.346233), 2.06642, 3.70449, 3.12818, 0.996603, (-0.86431), (-0.329528), 0.676045, 0.160602, (-0.758496), 0.659305, 1.69823, (-0.97531), 0.648278, 0.624279, 0.722983, 0.240348, (-1.02637), 1.02795, 1.09278, (-1.03644), (-0.663801), 0.606892, (-0.428878), 1.91346, 0.253488, 0.326607, (-0.270898), (-1.10892), 0.865051, 2.07797, (-0.00909024), 0.801396, (-0.661388), 0.113704, 0.0491236, (-0.459852), (-0.637781), 0.812113, (-0.223595), 2.48726, (-0.504955), (-0.188372), (-0.173702), (-0.211227), (-1.21422), (-0.754835), 1.19239, (-0.658991), (-1.02512), (-0.200587), (-0.255074), (-1.31512), 0.589649, 0.532742, 0.752767, 0.364141, (-0.397714), (-1.47808), 0.00681162, (-0.680002), (-0.166359), 0.19069, (-0.214216), (-0.310965)} , { (-0.765843), (-0.204028), 1.23928, (-1.72018), (-0.257681), (-1.41329), (-3.72662), (-0.089482), 0.247998, (-0.272371), 0.22498, 1.59196, 1.78294, 1.25347, 1.04011, 0.834478, 0.615505, 0.156796, (-0.600527), (-0.523498), (-0.577579), (-0.944208), (-1.36255), (-2.27036), (-1.18672), (-4.1083), (-1.53175), (-3.91491), 0.444019, 0.237778, 1.05064, 1.87677, 1.26709, 1.46894, 2.61988, 3.97335, 1.42641, 1.08724, 0.923796, (-0.522493), (-0.0351388), (-0.849058), (-1.03683), (-0.516568), (-0.867435), (-1.42346), (-0.519452), (-2.07536), (-0.469635), (-0.0593428), 0.299489, 0.321588, 1.42039, 1.53839, 1.44779, 1.07737, 0.468917, 0.314579, (-0.176681), (-0.243418), (-0.0424182), (-0.638698), (-2.36272), (-1.17615), 1.03934, (-0.160146), (-0.836866), (-0.570338), (-0.808443), (-1.07198), (-0.0829507), (-0.526712), (-1.42049), (-0.764833), (-0.715585), (-1.97697), 0.716055, 0.698008, 1.03366, (-0.742382), 1.02779, (-2.04032), (-0.155102), 0.258196, (-1.56613), 2.08703, (-0.423355), 0.990989, (-0.876027), 0.377921, (-0.306095), (-0.249548), (-1.85954), (-1.78871), (-1.96821), (-0.952022), (-0.911113), 0.911009, 0.346758, 0.972013, 0.617338, (-0.504305), 0.0720747, (-2.19797), (-1.02214), 0.34514, (-0.567284), 0.517624, (-1.1886), (-0.607195), (-0.610214), (-1.51666), (-1.16207), (-0.897923), (-0.806333), (-1.09912), (-0.906451), 0.78004, 0.535989, (-0.295523), (-0.0251677), 0.455189, 0.82618, 0.257778} , { 3.24614, 1.64418, (-0.0806098), (-0.669134), (-0.954415), (-2.09036), (-4.23247), (-1.51598), (-1.5588), 1.55088, 1.74877, 0.505391, 2.22638, 1.55738, 1.18256, 1.17341, 1.31879, 1.73396, 1.70496, 1.2179, 0.179081, (-1.25087), (-1.96582), 1.31335, (-0.369294), (-0.637282), 0.769794, 4.02245, (-0.17811), 0.159152, (-0.879234), (-0.279704), (-0.572788), (-0.587601), 0.197388, 1.67596, (-0.23593), 0.617643, 0.546079, (-0.614017), (-0.128685), 1.25697, 0.611641, 0.685198, (-1.0544), (-2.67951), (-2.52244), (-0.788791), 0.282224, 1.17397, 1.39117, 1.84233, 1.68423, (-0.829286), (-0.723451), 1.46392, 1.82227, 1.87286, 1.48383, 0.625673, (-1.75669), (-2.51769), (-2.08028), (-2.72227), (-0.0178842), (-1.18148), 0.107936, 1.24783, (-2.2398), (-1.27041), (-0.0244979), 1.86048, (-0.207629), (-0.249058), (-0.223291), (-0.298203), (-0.0449118), (-1.20615), 0.875116, 0.806938, 0.0912104, 0.55126, (-0.257858), 1.75021, 0.505189, (-0.823757), (-0.508209), 0.332957, 1.55478, (-0.0502995), 0.482804, 1.62936, (-0.763572), (-0.359642), (-0.26023), (-1.14176), 0.43251, 1.76899, 0.713453, 0.43097, 0.847949, (-0.142799), 0.562317, (-1.08153), (-0.581901), (-0.334438), 1.01912, (-1.04257), (-0.0762015), (-0.519234), (-0.550349), (-0.124661), (-0.257198), (-0.185707), (-0.083048), (-0.348321), (-0.344114), (-0.0968216), 1.27071, 1.0245, 1.08499, 1.07589, (-0.538036), 0.134811} , { 1.13895, 1.42838, 0.0128673, (-0.382761), 2.26783, 3.30068, 1.33097, 3.72273, 0.522466, 0.971609, 0.285212, (-0.831843), (-0.434935), (-2.06348), (-2.42217), (-2.12944), (-1.85479), 0.321661, 1.09044, 1.04507, 4.06184, 0.717115, 3.93392, 6.21805, 4.86765, 8.25734, 0.860641, (-8.00141), (-0.0699632), (-0.0480243), (-3.16507), (-3.96257), (-3.95814), (-3.41385), (-4.19807), (-4.1304), (-2.82935), (-1.23943), (-0.591112), 1.15271, (-1.17129), 0.434792, (-0.807152), (-0.181471), 2.15876, 3.05574, 0.877067, 1.62576, 1.08136, 0.00623665, (-0.225711), (-1.05103), (-2.09421), (-2.77737), (-2.7644), (-2.82226), (-1.59959), (-0.236113), 0.229317, 0.991259, 3.70356, 2.10121, 5.11119, 1.98363, 1.24765, (-1.02795), (-0.0378027), (-0.188974), (-0.660345), (-0.411192), 0.0469898, 0.822377, 0.316789, 0.38104, 0.641587, 1.26663, 0.255387, (-0.835534), 0.66447, (-1.31678), 0.257496, (-0.707711), 1.02077, (-1.45939), (-1.42655), 1.10354, (-1.54926), (-0.665819), 0.728381, 1.21638, 0.141711, 1.02743, 1.4394, 1.73307, 1.50093, 2.22372, (-1.66099), 1.03282, (-1.18397), 1.11128, (-0.239851), 2.10435, (-1.07524), 0.48697, (-1.34803), (-0.336196), (-0.138764), 1.46106, 1.02584, (-1.74968), (-0.329819), 1.02573, 0.483138, 0.821193, 0.718485, 0.0599285, 2.07116, (-0.368394), 0.303452, 0.513833, (-1.21378), 0.408735, (-0.146479), (-0.712796)} } ;
const float protonn_test_prototypeLabelMatrix[24][10]={ { 0, 75.9556, 0, (-64.1005), 2.23657, (-1.45586), 0, (-5.5726), 0, (-1.49334)} , { 0, 0.910927, 0, (-0.013878), 0.008996, (-0.002169), 0, (-0.00257), 0, 0.003475} , { 0, 0.818721, 0, 0.001895, (-0.00321), (-0.002276), 0, 0.005009, 0, (-0.001664)} , { 0, 1.10875, 0, (-0.145419), 0.025456, (-0.018585), 0, (-0.036601), 0, 0.035254} , { 0, (-198.676), 0, 216.61, (-2.65893), 0.972147, 0, (-7.04951), 0, (-3.4242)} , { 0, (-0.453358), 0, (-0.15518), (-0.442656), 2.52198, 0, 10.7827, 0, 0.803204} , { 0, (-20.5563), 0, (-8.74473), (-1.14045), 2.19035, 0, 32.5634, 0, 8.58749} , { 0, 2.7613, 0, 0.005832, (-0.005249), 0.026091, 0, 0.010515, 0, 0.034346} , { 0, 4.02773, 0, (-0.016404), (-0.031655), (-2.27903), 0, 0.160121, 0, (-0.044455)} , { 0, 7.02422, 0, (-6.08528), (-8.01601), 4.70405, 0, 3.71455, 0, (-19.7563)} , { 0, (-2.22439), 0, (-0.070755), 19.6506, (-12.2924), 0, (-0.202986), 0, 0.315483} , { 0, 7.35498, 0, 0.292836, (-0.04826), 0.134323, 0, 0.489468, 0, (-0.47411)} , { 0, 23.4021, 0, 25.01, (-10.1), 6.06779, 0, 2.07992, 0, 1.78188} , { 0, (-76.0099), 0, 0.115805, 68.1258, (-11.7047), 0, (-7.65251), 0, 2.73188} , { 0, 1.53819, 0, (-0.020722), 0.001557, (-0.017411), 0, 0.175616, 0, 0.047383} , { 0, 19.3917, 0, (-0.321323), (-1.21846), 0.700491, 0, (-16.1693), 0, 2.73558} , { 0, 11.5481, 0, 0.790433, 0.532947, (-0.654553), 0, (-7.49814), 0, (-0.737583)} , { 0, (-65.949), 0, (-1.01949), (-5.2716), 1.2637, 0, 51.8686, 0, 8.28487} , { 0, 16.733, 0, 0.445306, (-0.122911), (-0.327576), 0, 5.14276, 0, (-15.0933)} , { 0, 0.577766, 0, 0.083908, (-16.512), 21.4719, 0, 0.696132, 0, (-0.398278)} , { 0, 14.2301, 0, 0.037301, 0.010807, (-0.103009), 0, 0.250566, 0, (-0.200047)} , { 0, 4.85408, 0, (-0.036892), 0.113464, (-0.100647), 0, (-1.64054), 0, (-0.025206)} , { 0, (-1.70266), 0, 2.1284, 1.18009, 0.938087, 0, (-11.7147), 0, (-6.79234)} , { 0, (-7.93051), 0, 0.077904, 0.20895, (-0.181139), 0, (-1.53709), 0, 16.5289} } ;
const int32_t protonn_test_BAUD_RATE=115200;
const int16_t protonn_test_NUM_BUCKETS=20;
const int16_t protonn_test_STRIDE=20;
const int16_t protonn_test_BUCKET_WIDTH=20;
const int16_t protonn_test_BUCKET_BUFF_WIDTH=40;
const int16_t protonn_test_FEATURE_LENGTH=124;
const int16_t protonn_test_FEAT_VEC_DIM=124;
const int16_t protonn_test_GEST_NOTA=0;
const int16_t protonn_test_GEST_SILENCE=1;
const int16_t protonn_test_GEST_TAP=2;
const int16_t protonn_test_GEST_DTAP=3;
const int16_t protonn_test_GEST_LTWIST=4;
const int16_t protonn_test_GEST_RTWIST=5;
const int16_t protonn_test_GEST_Slow_LTWIST=7;
const int16_t protonn_test_GEST_Slow_RTWIST=8;
const float protonn_test_FLT_NMIN=(-3.402823e+30);
/*End of module vars for protonn_test*/
float (*protonn_test_predict_x_p)[124];
#define protonn_test_predict_x (*protonn_test_predict_x_p)
/*Module vars for thresholding_test*/
const int thresholding_test_scoreThreshold[10]={ 0, 0, 0, 90000, 60000, 70000, 0, 70000, 0, 45000} ;
int thresholding_test___pos_vote = 0;
/*End of module vars for thresholding_test*/
int thresholding_test_Threshold_result;
int (*thresholding_test_Threshold_scores_p)[10];
#define thresholding_test_Threshold_scores (*thresholding_test_Threshold_scores_p)
/*Module vars for if_changed_test*/
int if_changed_test_prevVoteResult=1;
/*End of module vars for if_changed_test*/
int if_changed_test_is_changed_voteResult;
/*Module vars for print_action_test*/
/*End of module vars for print_action_test*/
int print_action_test_print_voteResult;
typedef enum { __mpu_acq_test_mpu_acq, __normalize_inp_test_normalize, __tlcfeaturizer_test_featurizer, __protonn_test_predict, __thresholding_test_Threshold, __if_changed_test_is_changed, __print_action_test_print}  __pipe;
 __pipe __state = __mpu_acq_test_mpu_acq;
void _mpu_acq_test_init()
{
    uint8_t mpu_acq_test_init_devStatus;
    {
        Wire.begin();
        Wire.setClock(400000);
        mpu_acq_test_mpu1.initialize();
        mpu_acq_test_init_devStatus=mpu_acq_test_mpu1.dmpInitialize();
        if((mpu_acq_test_init_devStatus==0))
        {
            mpu_acq_test_mpu1.setDMPEnabled(true);
        }
        else
        {
        }
        mpu_acq_test_fifoPacketSize=mpu_acq_test_mpu1.dmpGetFIFOPacketSize();
    }
}
void _mpu_acq_test_mpu_acq()
{
    uint16_t mpu_acq_test_mpu_acq_fifoCount=mpu_acq_test_mpu1.getFIFOCount();
    uint8_t mpu_acq_test_mpu_acq_mpuIntStatus=mpu_acq_test_mpu1.getIntStatus();
    VectorInt16 mpu_acq_test_mpu_acq_acc__, mpu_acq_test_mpu_acq_gyr__;
    {
        if(((mpu_acq_test_mpu_acq_mpuIntStatus&16)||(mpu_acq_test_mpu_acq_fifoCount==1024)))
        {
            mpu_acq_test_mpu1.resetFIFO();
        }
        else
        if((mpu_acq_test_mpu_acq_mpuIntStatus&2))
        {
            if((mpu_acq_test_mpu_acq_fifoCount>=mpu_acq_test_fifoPacketSize))
            {
                mpu_acq_test_mpu1.getFIFOBytes(mpu_acq_test_fifoBuffer, mpu_acq_test_fifoPacketSize);
                mpu_acq_test_mpu1.dmpGetAccel(&(mpu_acq_test_mpu_acq_acc__), mpu_acq_test_fifoBuffer);
                mpu_acq_test_mpu1.dmpGetGyro(&(mpu_acq_test_mpu_acq_gyr__), mpu_acq_test_fifoBuffer);
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_x]=mpu_acq_test_mpu_acq_acc__.x;
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_y]=mpu_acq_test_mpu_acq_acc__.y;
                mpu_acq_test_mpu_acq_acc[mpu_acq_test_z]=mpu_acq_test_mpu_acq_acc__.z;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_x]=mpu_acq_test_mpu_acq_gyr__.x;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_y]=mpu_acq_test_mpu_acq_gyr__.y;
                mpu_acq_test_mpu_acq_gyr[mpu_acq_test_z]=mpu_acq_test_mpu_acq_gyr__.z;
                normalize_inp_test_normalize_acc_p = &(mpu_acq_test_mpu_acq_acc); normalize_inp_test_normalize_gyr_p = &(mpu_acq_test_mpu_acq_gyr); __state = __normalize_inp_test_normalize;
            }
        }
    }
}
void _normalize_inp_test_init()
{
    {
        normalize_inp_test_minAcc[normalize_inp_test_x]=(-16384);
        normalize_inp_test_minAcc[normalize_inp_test_y]=(-16384);
        normalize_inp_test_minAcc[normalize_inp_test_z]=(-16384);
        normalize_inp_test_maxAcc[normalize_inp_test_x]=16384;
        normalize_inp_test_maxAcc[normalize_inp_test_y]=16384;
        normalize_inp_test_maxAcc[normalize_inp_test_z]=16384;
        normalize_inp_test_minGyr[normalize_inp_test_x]=(-512);
        normalize_inp_test_minGyr[normalize_inp_test_y]=(-2048);
        normalize_inp_test_minGyr[normalize_inp_test_z]=(-512);
        normalize_inp_test_maxGyr[normalize_inp_test_x]=512;
        normalize_inp_test_maxGyr[normalize_inp_test_y]=2048;
        normalize_inp_test_maxGyr[normalize_inp_test_z]=512;
        normalize_inp_test_numNewReadings=0;
        normalize_inp_test_samplesAfterReset=0;
    }
}
void _normalize_inp_test_minMaxNormalize(int16_t normalize_inp_test_minMaxNormalize_v[3], int16_t normalize_inp_test_minMaxNormalize_vmin[3], int16_t normalize_inp_test_minMaxNormalize_vmax[3], float normalize_inp_test_minMaxNormalize_dst[3])
{
    {
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]=(( (float) (normalize_inp_test_minMaxNormalize_v[normalize_inp_test_x]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_x])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_x]/(( (float) (normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_x]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_x]))));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]=(( (float) (normalize_inp_test_minMaxNormalize_v[normalize_inp_test_y]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_y])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_y]/(( (float) (normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_y]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_y]))));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]=(( (float) (normalize_inp_test_minMaxNormalize_v[normalize_inp_test_z]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_z])));
        normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]=(normalize_inp_test_minMaxNormalize_dst[normalize_inp_test_z]/(( (float) (normalize_inp_test_minMaxNormalize_vmax[normalize_inp_test_z]))-( (float) (normalize_inp_test_minMaxNormalize_vmin[normalize_inp_test_z]))));
    }
}
void _normalize_inp_test_normalize()
{
    {
        _normalize_inp_test_minMaxNormalize(normalize_inp_test_normalize_acc, normalize_inp_test_minAcc, normalize_inp_test_maxAcc, normalize_inp_test_normalize_normAcc);
        _normalize_inp_test_minMaxNormalize(normalize_inp_test_normalize_gyr, normalize_inp_test_minGyr, normalize_inp_test_maxGyr, normalize_inp_test_normalize_normGyr);
        (normalize_inp_test_normAX[normalize_inp_test___pos_normAX = (normalize_inp_test___pos_normAX + 1 == 400 ? 0: normalize_inp_test___pos_normAX + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_x]);
        (normalize_inp_test_normAY[normalize_inp_test___pos_normAY = (normalize_inp_test___pos_normAY + 1 == 400 ? 0: normalize_inp_test___pos_normAY + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_y]);
        (normalize_inp_test_normAZ[normalize_inp_test___pos_normAZ = (normalize_inp_test___pos_normAZ + 1 == 400 ? 0: normalize_inp_test___pos_normAZ + 1)] = normalize_inp_test_normalize_normAcc[normalize_inp_test_z]);
        (normalize_inp_test_normGX[normalize_inp_test___pos_normGX = (normalize_inp_test___pos_normGX + 1 == 400 ? 0: normalize_inp_test___pos_normGX + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_x]);
        (normalize_inp_test_normGY[normalize_inp_test___pos_normGY = (normalize_inp_test___pos_normGY + 1 == 400 ? 0: normalize_inp_test___pos_normGY + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_y]);
        (normalize_inp_test_normGZ[normalize_inp_test___pos_normGZ = (normalize_inp_test___pos_normGZ + 1 == 400 ? 0: normalize_inp_test___pos_normGZ + 1)] = normalize_inp_test_normalize_normGyr[normalize_inp_test_z]);
        normalize_inp_test_numNewReadings=(normalize_inp_test_numNewReadings+1);
        normalize_inp_test_samplesAfterReset=(normalize_inp_test_samplesAfterReset+1);
        if((normalize_inp_test_samplesAfterReset<250))
        {
            if((normalize_inp_test_numNewReadings==normalize_inp_test_STRIDE))
            {
                normalize_inp_test_numNewReadings=0;
            }
        }
        else
        if((normalize_inp_test_numNewReadings==normalize_inp_test_STRIDE))
        {
            normalize_inp_test_samplesAfterReset=401;
            normalize_inp_test_numNewReadings=0;
            tlcfeaturizer_test_featurizer_normAX_p = &(normalize_inp_test_normAX); tlcfeaturizer_test_featurizer___pos_normAX = normalize_inp_test___pos_normAX;tlcfeaturizer_test_featurizer_normAY_p = &(normalize_inp_test_normAY); tlcfeaturizer_test_featurizer___pos_normAY = normalize_inp_test___pos_normAY;tlcfeaturizer_test_featurizer_normAZ_p = &(normalize_inp_test_normAZ); tlcfeaturizer_test_featurizer___pos_normAZ = normalize_inp_test___pos_normAZ;tlcfeaturizer_test_featurizer_normGX_p = &(normalize_inp_test_normGX); tlcfeaturizer_test_featurizer___pos_normGX = normalize_inp_test___pos_normGX;tlcfeaturizer_test_featurizer_normGY_p = &(normalize_inp_test_normGY); tlcfeaturizer_test_featurizer___pos_normGY = normalize_inp_test___pos_normGY;tlcfeaturizer_test_featurizer_normGZ_p = &(normalize_inp_test_normGZ); tlcfeaturizer_test_featurizer___pos_normGZ = normalize_inp_test___pos_normGZ;__state = __tlcfeaturizer_test_featurizer;
        }
    }
}
void _tlcfeaturizer_test_init()
{
    {
    }
}
void _tlcfeaturizer_test_getBucket(float tlcfeaturizer_test_getBucket_sensorValue1D[400], int tlcfeaturizer_test_getBucket___pos_sensorValue1D, boolean tlcfeaturizer_test_getBucket_isGY)
{
    int tlcfeaturizer_test_getBucket_imax=0, tlcfeaturizer_test_getBucket_imin=0, tlcfeaturizer_test_getBucket_maxval=0, tlcfeaturizer_test_getBucket_minval=0, tlcfeaturizer_test_getBucket_maxcount=0, tlcfeaturizer_test_getBucket_mincount=0, tlcfeaturizer_test_getBucket_postemp=0, tlcfeaturizer_test_getBucket_negtemp=0, tlcfeaturizer_test_getBucket_bucketCount, tlcfeaturizer_test_getBucket_val, tlcfeaturizer_test_getBucket_index, tlcfeaturizer_test_getBucket_thresholdCount;
    boolean tlcfeaturizer_test_getBucket_flagPos=false, tlcfeaturizer_test_getBucket_flagNeg=false;
    {
        for(int i=0; i<400; i++)
        {
            tlcfeaturizer_test_getBucket_val=(( (int) (100))*tlcfeaturizer_test_getBucket_sensorValue1D[ ( (i) + tlcfeaturizer_test_getBucket___pos_sensorValue1D) % 400]);
            if((tlcfeaturizer_test_getBucket_val<0))
            {
                tlcfeaturizer_test_featureVector[tlcfeaturizer_test_bucketIndex]=(tlcfeaturizer_test_featureVector[tlcfeaturizer_test_bucketIndex]+1);
            }
            else
            if((tlcfeaturizer_test_getBucket_val>100))
            {
                tlcfeaturizer_test_featureVector[(tlcfeaturizer_test_bucketIndex+19)]=(tlcfeaturizer_test_featureVector[(tlcfeaturizer_test_bucketIndex+19)]+1);
            }
            else
            {
                tlcfeaturizer_test_getBucket_index=(tlcfeaturizer_test_getBucket_val/5);
                tlcfeaturizer_test_featureVector[(tlcfeaturizer_test_bucketIndex+tlcfeaturizer_test_getBucket_index)]=(tlcfeaturizer_test_featureVector[(tlcfeaturizer_test_bucketIndex+tlcfeaturizer_test_getBucket_index)]+1);
            }
            if((tlcfeaturizer_test_getBucket_isGY==1))
            {
                tlcfeaturizer_test_getBucket_thresholdCount=3;
                if(((tlcfeaturizer_test_getBucket_val>62)&&(tlcfeaturizer_test_getBucket_flagPos==0)))
                {
                    tlcfeaturizer_test_getBucket_maxcount=1;
                    tlcfeaturizer_test_getBucket_postemp=i;
                    tlcfeaturizer_test_getBucket_flagPos=true;
                    tlcfeaturizer_test_getBucket_flagNeg=false;
                }
                else
                if(((tlcfeaturizer_test_getBucket_val>62)&&(tlcfeaturizer_test_getBucket_flagPos==1)))
                {
                    tlcfeaturizer_test_getBucket_flagNeg=0;
                    tlcfeaturizer_test_getBucket_mincount=0;
                    tlcfeaturizer_test_getBucket_maxcount=(tlcfeaturizer_test_getBucket_maxcount+1);
                    if((tlcfeaturizer_test_getBucket_maxcount>tlcfeaturizer_test_getBucket_maxval))
                    {
                        tlcfeaturizer_test_getBucket_maxval=tlcfeaturizer_test_getBucket_maxcount;
                        if((tlcfeaturizer_test_getBucket_maxval>tlcfeaturizer_test_getBucket_thresholdCount))
                        {
                            tlcfeaturizer_test_featureVector[1]=tlcfeaturizer_test_getBucket_maxval;
                        }
                        tlcfeaturizer_test_getBucket_imax=tlcfeaturizer_test_getBucket_postemp;
                        if((tlcfeaturizer_test_getBucket_maxval>tlcfeaturizer_test_getBucket_thresholdCount))
                        {
                            tlcfeaturizer_test_featureVector[0]=tlcfeaturizer_test_getBucket_imax;
                        }
                    }
                }
                else
                if((((tlcfeaturizer_test_getBucket_val<62)&&(tlcfeaturizer_test_getBucket_flagPos==1))&&(tlcfeaturizer_test_getBucket_val>32)))
                {
                    tlcfeaturizer_test_getBucket_flagPos=false;
                    tlcfeaturizer_test_getBucket_maxcount=0;
                    tlcfeaturizer_test_getBucket_mincount=0;
                }
                else
                if((((tlcfeaturizer_test_getBucket_val<62)&&(tlcfeaturizer_test_getBucket_flagPos==1))&&(tlcfeaturizer_test_getBucket_val<32)))
                {
                    tlcfeaturizer_test_getBucket_flagPos=false;
                    tlcfeaturizer_test_getBucket_maxcount=0;
                    tlcfeaturizer_test_getBucket_mincount=0;
                    tlcfeaturizer_test_getBucket_negtemp=i;
                    tlcfeaturizer_test_getBucket_flagNeg=true;
                }
                else
                if(((tlcfeaturizer_test_getBucket_val<32)&&(tlcfeaturizer_test_getBucket_flagNeg==0)))
                {
                    tlcfeaturizer_test_getBucket_mincount=1;
                    tlcfeaturizer_test_getBucket_negtemp=i;
                    tlcfeaturizer_test_getBucket_flagNeg=true;
                    tlcfeaturizer_test_getBucket_flagPos=false;
                }
                else
                if(((tlcfeaturizer_test_getBucket_val<32)&&(tlcfeaturizer_test_getBucket_flagNeg==1)))
                {
                    tlcfeaturizer_test_getBucket_mincount=(tlcfeaturizer_test_getBucket_mincount+1);
                    if((tlcfeaturizer_test_getBucket_mincount>tlcfeaturizer_test_getBucket_minval))
                    {
                        tlcfeaturizer_test_getBucket_minval=tlcfeaturizer_test_getBucket_mincount;
                        if((tlcfeaturizer_test_getBucket_minval>tlcfeaturizer_test_getBucket_thresholdCount))
                        {
                            tlcfeaturizer_test_featureVector[2]=tlcfeaturizer_test_getBucket_minval;
                        }
                        tlcfeaturizer_test_getBucket_imin=tlcfeaturizer_test_getBucket_negtemp;
                        if((tlcfeaturizer_test_getBucket_minval>tlcfeaturizer_test_getBucket_thresholdCount))
                        {
                            tlcfeaturizer_test_featureVector[3]=tlcfeaturizer_test_getBucket_imin;
                        }
                    }
                }
                else
                if((((tlcfeaturizer_test_getBucket_val>32)&&(tlcfeaturizer_test_getBucket_flagNeg==1))&&(tlcfeaturizer_test_getBucket_val<65)))
                {
                    tlcfeaturizer_test_getBucket_flagNeg=false;
                    tlcfeaturizer_test_getBucket_mincount=0;
                }
                else
                if((((tlcfeaturizer_test_getBucket_val>32)&&(tlcfeaturizer_test_getBucket_flagNeg==1))&&(tlcfeaturizer_test_getBucket_val>65)))
                {
                    tlcfeaturizer_test_getBucket_flagNeg=false;
                    tlcfeaturizer_test_getBucket_mincount=0;
                    tlcfeaturizer_test_getBucket_maxcount=1;
                    tlcfeaturizer_test_getBucket_postemp=i;
                    tlcfeaturizer_test_getBucket_flagPos=true;
                }
                else
                {
                    tlcfeaturizer_test_getBucket_flagPos=false;
                    tlcfeaturizer_test_getBucket_maxcount=0;
                    tlcfeaturizer_test_getBucket_flagNeg=false;
                    tlcfeaturizer_test_getBucket_mincount=0;
                }
            }
        }
        tlcfeaturizer_test_bucketIndex=(tlcfeaturizer_test_bucketIndex+tlcfeaturizer_test_BUCKET_WIDTH);
    }
}
void _tlcfeaturizer_test_featurizer()
{
    {
        for(int __i=0; __i<124; __i++)
        {
            tlcfeaturizer_test_featureVector[__i]=0;
        }
        tlcfeaturizer_test_featureVector[0]=(-1);
        tlcfeaturizer_test_featureVector[3]=(-1);
        tlcfeaturizer_test_bucketIndex=4;
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normAX, tlcfeaturizer_test_featurizer___pos_normAX, false);
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normAY, tlcfeaturizer_test_featurizer___pos_normAY, false);
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normAZ, tlcfeaturizer_test_featurizer___pos_normAZ, false);
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normGX, tlcfeaturizer_test_featurizer___pos_normGX, false);
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normGY, tlcfeaturizer_test_featurizer___pos_normGY, true);
        _tlcfeaturizer_test_getBucket(tlcfeaturizer_test_featurizer_normGZ, tlcfeaturizer_test_featurizer___pos_normGZ, false);
        for(int __i=0; __i<124; __i++)
        {
            tlcfeaturizer_test_featureVectorF[__i]=tlcfeaturizer_test_featureVector[__i];
        }
        protonn_test_predict_x_p = &(tlcfeaturizer_test_featureVectorF); __state = __protonn_test_predict;
    }
}
void _protonn_test_predict()
{
    float protonn_test_predict_weight=0, protonn_test_predict_maxScore;
    int protonn_test_predict_maxIndex;
    float __t0;
    float __t1;
    float __t2;
    float __t3;
    float __t4;
    {
        for(int __i=0; __i<10; __i++)
        {
            protonn_test_predict_y_cap[__i]=0;
            __t0=0;
            for(int __j=0; __j<124; __j++)
            {
                __t0=((protonn_test_ldProjectionMatrix[__i][__j]*protonn_test_predict_x[__j])+__t0);
            }
            protonn_test_predict_x_cap[__i]=__t0;
        }
        for(int i=0; i<protonn_test_numPrototypes; i++)
        {
            protonn_test_predict_weight=0;
            __t3=0;
            for(int __i=0; __i<10; __i++)
            {
                __t1=(protonn_test_predict_x_cap[__i]-protonn_test_prototypeMatrix[i][__i]);
                __t2=(protonn_test_predict_x_cap[__i]-protonn_test_prototypeMatrix[i][__i]);
                __t3=((__t1*__t2)+__t3);
            }
            protonn_test_predict_weight=__t3;
            protonn_test_predict_weight=((((-1)*protonn_test_gamma)*protonn_test_gamma)*protonn_test_predict_weight);
            protonn_test_predict_weight=exp(protonn_test_predict_weight);
            __t4=0;
            for(int __i=0; __i<10; __i++)
            {
                __t4=((protonn_test_prototypeLabelMatrix[i][__i]*protonn_test_predict_weight)+__t4);
                protonn_test_predict_y_cap[__i]=(__t4+protonn_test_predict_y_cap[__i]);
            }
        }
        for(int i=0; i<protonn_test_numLabels; i++)
        {
            protonn_test_scores[i]=(100000*protonn_test_predict_y_cap[i]);
        }
        protonn_test_predict_maxScore=protonn_test_FLT_NMIN;
        protonn_test_predict_maxIndex=0;
        for(int i=0; i<protonn_test_numLabels; i++)
        {
            if((protonn_test_predict_y_cap[i]>protonn_test_predict_maxScore))
            {
                protonn_test_predict_maxIndex=i;
                protonn_test_predict_maxScore=protonn_test_predict_y_cap[i];
            }
        }
        Serial.println(protonn_test_predict_maxIndex);
        thresholding_test_Threshold_result = protonn_test_predict_maxIndex; thresholding_test_Threshold_scores_p = &(protonn_test_scores); __state = __thresholding_test_Threshold;
    }
}
void _thresholding_test_Threshold()
{
    int thresholding_test_Threshold_out, thresholding_test_Threshold_maxCount=(-1), thresholding_test_Threshold_voteResult=1;
    {
        Serial.print("Result:  ");
        Serial.println(thresholding_test_Threshold_result);
        if(((thresholding_test_Threshold_result<0)||(thresholding_test_Threshold_result>=10)))
        {
            Serial.println("Out of Bound");
        }
        else
        {
            if((thresholding_test_Threshold_scores[thresholding_test_Threshold_result]<thresholding_test_scoreThreshold[thresholding_test_Threshold_result]))
            {
                thresholding_test_Threshold_result=1;
            }
            thresholding_test_Threshold_out=thresholding_test_vote[ ( (0) + thresholding_test___pos_vote) % 10];
            (thresholding_test_vote[thresholding_test___pos_vote = (thresholding_test___pos_vote + 1 == 10 ? 0: thresholding_test___pos_vote + 1)] = thresholding_test_Threshold_result);
            thresholding_test_resultScores[thresholding_test_Threshold_result]=(thresholding_test_resultScores[thresholding_test_Threshold_result]+1);
            if((thresholding_test_Threshold_out!=0))
            {
                thresholding_test_resultScores[thresholding_test_Threshold_out]=(thresholding_test_resultScores[thresholding_test_Threshold_out]-1);
            }
            for(int i=0; i<10; i++)
            {
                if((thresholding_test_resultScores[i]>thresholding_test_Threshold_maxCount))
                {
                    thresholding_test_Threshold_maxCount=thresholding_test_resultScores[i];
                    thresholding_test_Threshold_voteResult=i;
                }
            }
            if_changed_test_is_changed_voteResult = thresholding_test_Threshold_voteResult; __state = __if_changed_test_is_changed;
        }
    }
}
void _if_changed_test_is_changed()
{
    {
        if((if_changed_test_is_changed_voteResult==if_changed_test_prevVoteResult))
        {
            if_changed_test_prevVoteResult=if_changed_test_is_changed_voteResult;
            if_changed_test_is_changed_voteResult=1;
        }
        else
        {
            if_changed_test_prevVoteResult=if_changed_test_is_changed_voteResult;
            print_action_test_print_voteResult = if_changed_test_is_changed_voteResult; __state = __print_action_test_print;
        }
    }
}
void _print_action_test_print()
{
    {
        if((print_action_test_print_voteResult==3))
        {
            Serial.println("double_tap");
        }
        else
        if((print_action_test_print_voteResult==5))
        {
            Serial.println("right_twist");
        }
        else
        if((print_action_test_print_voteResult==4))
        {
            Serial.println("right_twist");
        }
        else
        if((print_action_test_print_voteResult==7))
        {
            Serial.println("twirl");
        }
        else
        if((print_action_test_print_voteResult==9))
        {
            Serial.println("double_swipe");
        }
    }
}
void loop()
{
    switch(__state)
    {
        case __mpu_acq_test_mpu_acq:
        __state = __mpu_acq_test_mpu_acq;
        _mpu_acq_test_mpu_acq();
        break;
        case __normalize_inp_test_normalize:
        __state = __mpu_acq_test_mpu_acq;
        _normalize_inp_test_normalize();
        break;
        case __tlcfeaturizer_test_featurizer:
        __state = __mpu_acq_test_mpu_acq;
        _tlcfeaturizer_test_featurizer();
        break;
        case __protonn_test_predict:
        __state = __mpu_acq_test_mpu_acq;
        _protonn_test_predict();
        break;
        case __thresholding_test_Threshold:
        __state = __mpu_acq_test_mpu_acq;
        _thresholding_test_Threshold();
        break;
        case __if_changed_test_is_changed:
        __state = __mpu_acq_test_mpu_acq;
        _if_changed_test_is_changed();
        break;
        case __print_action_test_print:
        __state = __mpu_acq_test_mpu_acq;
        _print_action_test_print();
        break;
        default :
        __state = __mpu_acq_test_mpu_acq;
    }
}
void setup()
{
    _mpu_acq_test_init();
    _normalize_inp_test_init();
    _tlcfeaturizer_test_init();
}